{
	"info": {
		"_postman_id": "612629c4-4321-439a-88c4-df70d91638fb",
		"name": "Library",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21613261"
	},
	"item": [
		{
			"name": "AddBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"const bookID = jsonData.ID;\r",
							"\r",
							"pm.environment.set(\"book_id\", bookID);\r",
							"\r",
							"// Check if the response JSON is not empty\r",
							"pm.test('Response JSON is not empty', () => {\r",
							"    pm.expect(jsonData).to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"function cleanUpScript(){\r",
							"    pm.environment.set(\"book_id\",bookID)\r",
							"    pm.setNextRequest(\"DeleteBook\");\r",
							"}\r",
							"\r",
							"pm.test('Response status is 200 and message', () => {\r",
							"    try{\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(jsonData.Msg).to.eql(\"successfully added\");\r",
							"    }\r",
							"    catch(err){\r",
							"        console.log(err)\r",
							"        if(jsonData.msg.includes(\"exists\")){\r",
							"\r",
							"            cleanUpScript();\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test('Headers, Cookies and Response time validations', () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json;charset=UTF-8\");\r",
							"    // Performance\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
							"    \r",
							"    pm.expect(pm.response.text()).to.include(\"successfully added\");\r",
							"});\r",
							";\r",
							"\r",
							"pm.test(\"Correct ID is being added\", ()=>{\r",
							"\r",
							" const sentData = JSON.parse(pm.request.body)\r",
							"const sentISBN = sentData.isbn \r",
							"const  aisle = sentData.aisle\r",
							"const storedID = pm.environment.get(\"book_id\")\r",
							"// ID is created by concatinating ISBN and aisle number\r",
							"pm.expect(sentISBN + aisle).to.be.eql(storedID)\r",
							"\r",
							"\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							" const cc = pm.globals.get(\"companyCode\");\r",
							" const bookNumber = pm.variables.replaceIn(`{{$randomInt}}`);\r",
							" const author = pm.variables.replaceIn(`{{$randomFullName}}`)\r",
							" const bookName = pm.iterationData.get(\"book_name\", \"name\")\r",
							"\r",
							"    pm.collectionVariables.set(\"isbn\", cc + bookNumber);\r",
							"\tpm.collectionVariables.set(\"author_name\", author);\r",
							"    pm.collectionVariables.set(\"book_name\", bookName)\r",
							" \r",
							" \r",
							" \r",
							"\r",
							" "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{book_name}}\",\r\n    \"isbn\": \"{{isbn}}\",\r\n    \"aisle\": \"2224445\",\r\n    \"author\": \"{{author_name}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/Addbook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"book_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"isbn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"aisle\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"author\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"book_name\",\r",
							"        \"isbn\",\r",
							"        \"aisle\",\r",
							"        \"author\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Validate json response logic\",()=>{\r",
							"const details =  pm.response.json()\r",
							"//console.log(details)\r",
							"const author =  pm.collectionVariables.get(\"author_name\");\r",
							"pm.response.to.have.status(200)\r",
							"pm.expect(details[0].author).to.eql(author);\r",
							"\r",
							"pm.test(\"Validate json response schema\", ()=> {\r",
							"\r",
							"\tpm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?ID={{book_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{book_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.response.to.have.status(200);\r",
							"\r",
							"const data = pm.response.json();\r",
							"///console.log(data)\r",
							"pm.test('Status and code for delete', ()=> {\r",
							"  \r",
							"  pm.expect(pm.response.code).to.be.eql(200);\r",
							"  pm.expect(data.msg).to.be.eql(\"book is successfully deleted\")\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"ID\": \"{{book_id}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/DeleteBook.php?ID={{book_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{book_id}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "isbn",
			"value": "",
			"type": "string"
		},
		{
			"key": "author_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "book_name",
			"value": "",
			"type": "string"
		}
	]
}